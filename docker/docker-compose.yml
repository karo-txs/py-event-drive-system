version: '3.8'
services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ../.env
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8000:8000"
    volumes:
      - ../app:/app/app:ro
      - ../.env:/app/.env:ro
    command: uv run uvicorn app.interfaces.http.main:get_app --factory --host 0.0.0.0 --port 8000

  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ../.env
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8001:8000"
    volumes:
      - ../app:/app/app:ro
      - ../.env:/app/.env:ro
    command: uv run python -m app.interfaces.worker.main

  lambda:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ../.env
    depends_on:
      - db
      - rabbitmq
    environment:
      - PYTHONPATH=/app
    volumes:
      - ../app:/app/app:ro
      - ../.env:/app/.env:ro
    ports:
      - "9000:8080"
    entrypoint: [ "/usr/local/aws-lambda-rie/aws-lambda-rie", "python", "-m", "awslambdaric", "app.interfaces.lambda.handler.handler" ]

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgweb:
    image: sosedoff/pgweb
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres?sslmode=disable
    depends_on:
      - db
volumes:
  pgdata:
